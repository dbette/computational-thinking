###########################################
# Palindrom check #
###########################################

# Returns True if the input is a palindrom. First of all the algorithm needs to
# check, that the word that is provided as an input is a string. After that all
# the characters are converted to lower cases in order to check whether the
# original string and the reversed string are both equal. Addtionally all the
# unnecessary whitespaces in the beginning or the end of the input string are
# removed. For reversing the string the slicing tool is used as following:
# string[start:end:step] Start and end are kept empty to consider the whole
# string and the last parameter step is set to -1 in order to go through each
# letter of the word from the end to the start.

def palindrom_check(word):
    """Check word for palindrom.

    Args:
        word: String that should be checked.

    Returns:
        boolean: True if the word is a palindrom and False if the word is no palindrom.

    Raises:
        error: If the type of the input is not equal to string.
    """
    if type(word) != str:
        print("Error: Please enter a string!")
    else:
        check = word.lower().strip()
        return check == check[::-1]
        
#print(palindrom_check("Anna"))


###########################################
# Palindromic sections of string #
###########################################

# Returns a list of palindromic sections within a string. First of all the
# algorithm needs to check, that the word that is provided as an input is a
# string. After that all the characters are converted to lower cases in order to
# to be able to check all sections of the word. Addtionally all the unnecessary
# whitespaces in the beginning or the end of the input string are removed. For
# reversing the string the slicing tool is used as following:
# string[start:end:step] Start and end are kept empty to consider the whole
# string and the last parameter step is set to -1 in order to go through each
# letter of the word from the end to the start. The sections of the word are
# generated by starting with the first letter and increasing the length of the
# word by one addtional letter until the end of the word is reached. For each
# interation the comparison with the reversed string is performed. After all
# sections starting with the first letter are checked the algorithm continues
# with the sections beginning with the second letter and so on. If a palindromic
# section is found, the section is added to a list.

def palindromic_sections(word):
    """Check for palindromic sections in a word.

    Args:
        word: String that should be checked.

    Returns: 
        list: List of palindronic sections within the provided string.

    Raises:
        error: If the type of the input is not equal to string.
    """
    if type(word) != str:
        print("Error: Please enter a string!")
    else:
        valid_sections = []
        check = word.lower().strip()
        for i in range(0, len(check)):
            for j in range(i+1, len(check)):
                section = check[i:j+1]
                if section == section[::-1]:
                    valid_sections.append(section)
        return valid_sections

#print(palindromic_sections("detartrated"))


###########################################
# Fibonacci sequence #
###########################################

# The aim of the algorith is to print out a list of fibonacci numbers, that are
# smaller than a provided number. First a check is performed whether the
# provided number is of the type integer and positive. Since 0 is not considered
# as a fibonacci number a list with the values [0, 1] is initialized. After that
# a while loop is entered, which adds up the last item and the item before that
# and appends this value to the list. The while loop is exited when the newly
# calculated fibonacci number is greater than the input number. In the last step
# the list is printed out starting with the second element in the list, because
# 0 is not included as a fibonacci number.

def fibonacci(number):
    """Prints out a list of Fibonacci numbers, which are smaller than the parameter number.

    Args:
        number: Fibonacci numbers smaller or equal to the input number are calculated.

    Returns:
        list: Prints out a list of Fibonacci numbers.

    Raises:
        error: If the type of the number is no integer and the number is smaller or equal 0. 
    """
    if type(number) != int or number <= 0:
        print("Error: Please enter an integer greater than 0!")
    else:
        fib_list = [0, 1]
        while fib_list[-1] <= number:
            fib_num = fib_list[-1] + fib_list[-2]
            if fib_num >= number:
                break
            fib_list.append(fib_num)
        print(fib_list[1:])

#fibonacci(1000)
    

###########################################
# Increasing number check #
###########################################



def increase_check(input_list):
    """ Returns True if all the numbers in the provided input_list are increasing.

    Args:
        input_list: List of numbers.

    Returns:
        boolean: True if all numbers in the input_list are increasing.
    """
    if type(input_list) != list:
        return "Error: Please provide a list as an input!"
    
    try:
        for i in range(1, len(input_list)):
            if input_list[i] <= input_list[i-1]:
                return False
        return True
    except TypeError:
        return "Error: Element in list has wrong type for comparison!"

print(increase_check([1, 3, 4, 5, 6, 8, 10, 14]))
print(increase_check([1, 4, 5, 6, 8, 10, 9, 13]))
print(increase_check(["a", "b", "c", "d", "e", "f"]))
print(increase_check(["a", "b", "c", 8, "e", "f"]))
print(increase_check(1))